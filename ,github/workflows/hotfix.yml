name: Hotfix

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. 123)'
        required: true

env:
  REGISTRY: cr.yandex
  REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
  IMAGE_NAME: app
  VERSION: ${{ inputs.version }}
  HOTFIX_NUMBER: ${{ github.run_number }}

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: releases/$VERSION
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - run: npm run test

  build-push-docker:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4
        with:
          ref: releases/$VERSION
      - name: Login to Yandex Container Registry
        run: echo "${{ secrets.YC_OAUTH_TOKEN }}" | docker login --username iam --password-stdin $REGISTRY
      - name: Build and push Docker image
        run: |
          docker build -t $REGISTRY/$REGISTRY_ID/$IMAGE_NAME:${VERSION}_fix$HOTFIX_NUMBER -t $REGISTRY/$REGISTRY_ID/$IMAGE_NAME:${VERSION}_latest .
          docker push $REGISTRY/$REGISTRY_ID/$IMAGE_NAME:${VERSION}_fix$HOTFIX_NUMBER
          docker push $REGISTRY/$REGISTRY_ID/$IMAGE_NAME:${VERSION}_latest

  create-tag:
    runs-on: ubuntu-latest
    needs: build-push-docker
    steps:
      - uses: actions/checkout@v4
        with:
          ref: releases/$VERSION
      - name: Create hotfix tag
        run: |
          git tag v${VERSION}_fix${HOTFIX_NUMBER}
          git push origin v${VERSION}_fix${HOTFIX_NUMBER}

  comment-issue:
    runs-on: ubuntu-latest
    needs: create-tag
    steps:
      - uses: actions/checkout@v4
        with:
          ref: releases/$VERSION
          fetch-depth: 0
      - name: Get commits
        id: get-commits
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 --match "v*" HEAD~1)
          COMMITS=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Find release issue
        id: find-issue
        run: |
          ISSUE_ID=$(gh api graphql -f query='
            {
              search(type: ISSUE, query: "repo:${{ github.repository }} is:issue in:title Release v$VERSION", first: 1) {
                nodes {
                  ... on Issue { number }
                }
              }
            }' --jq '.data.search.nodes[0].number')
          echo "issue_id=$ISSUE_ID" >> $GITHUB_OUTPUT
      - name: Add comment to issue
        uses: actions/github-script@v7
        env:
          ISSUE_ID: ${{ steps.find-issue.outputs.issue_id }}
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: process.env.ISSUE_ID,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `**Hotfix applied**\n
                     **Date:** ${new Date().toISOString()}\n
                     **Author:** ${context.actor}\n
                     **Commits:**\n${{ steps.get-commits.outputs.commits }}\n
                     **Docker image:** ${process.env.REGISTRY}/${process.env.REGISTRY_ID}/${process.env.IMAGE_NAME}:${process.env.VERSION}_fix${process.env.HOTFIX_NUMBER}`
            })