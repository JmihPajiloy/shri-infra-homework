name: Deploy

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: '–í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123)'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Verify Docker image exists
        env:
          YC_REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
          RELEASE_VERSION: ${{ github.event.inputs.release_version }}
        run: |
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–∞ –≤ Container Registry
          echo ${{ secrets.YC_IAM_TOKEN }} | docker login \
            --username iam \
            --password-stdin \
            cr.yandex

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—Ä–∞–∑–∞ —Å —Ç–µ–≥–æ–º –≤–µ—Ä—Å–∏–∏
          docker pull cr.yandex/$YC_REGISTRY_ID/app:$RELEASE_VERSION || exit 1
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—Ä–∞–∑–∞ —Å —Ç–µ–≥–æ–º latest
          docker pull cr.yandex/$YC_REGISTRY_ID/app:${RELEASE_VERSION}_latest || exit 1
          
          echo "‚úÖ –û–±–∞ –æ–±—Ä–∞–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ Container Registry"

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            docker stop app || true
            docker rm app || true
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–∞ –∏ –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            echo ${{ secrets.YC_IAM_TOKEN }} | docker login \
              --username iam \
              --password-stdin \
              cr.yandex
            
            docker pull cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.event.inputs.release_version }}_latest
            docker run -d \
              --name app \
              -p 3000:3000 \
              cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.event.inputs.release_version }}_latest
            
            echo "üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!"

      - name: Find release issue
        id: find_issue
        uses: actions/github-script@v7
        env:
          VERSION: ${{ github.event.inputs.release_version }}
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              per_page: 100
            });
            
            const targetIssue = issues.find(issue => issue.title.includes(`Release v${process.env.VERSION}`));                     
            
            if (!targetIssue) {
              core.setFailed(`Release issue for version ${process.env.RELEASE_VERSION} not found`);
              return 0;
            }
            
            return targetIssue.number;

      - name: Add deployment comment to issue
        uses: actions/github-script@v7
        if: steps.find_issue.outputs.result != '0'
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.find_issue.outputs.result }},
              body: `üöÄ **–í—ã–∫–∞—Ç–∫–∞ –≤ –ø—Ä–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n` +
                    `- –î–∞—Ç–∞: ${new Date().toISOString().split('T')[0]}\n` +
                    `- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: @${{ github.actor }}\n` +
                    `- –í–µ—Ä—Å–∏—è: ${{ github.event.inputs.release_version }}\n` +
                    `- –û–±—Ä–∞–∑: cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.event.inputs.release_version }}_latest`
            });