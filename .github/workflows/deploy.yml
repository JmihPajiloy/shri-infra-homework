name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: '–í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123)'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Verify Docker image exists
        env:
          YC_REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
          RELEASE_VERSION: ${{ github.event.inputs.release_version }}
        run: |
          echo ${{ secrets.YC_IAM_TOKEN }} | docker login \
            --username iam \
            --password-stdin \
            cr.yandex

          docker pull cr.yandex/$YC_REGISTRY_ID/app:$RELEASE_VERSION || exit 1
          
          docker pull cr.yandex/$YC_REGISTRY_ID/app:${RELEASE_VERSION}_latest || exit 1
          
          echo "‚úÖ –û–±–∞ –æ–±—Ä–∞–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ Container Registry"

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            # Stop and remove previous container
            docker stop app || true
            docker rm app || true
            
            # Login and pull new image
            echo ${{ secrets.YC_IAM_TOKEN }} | docker login \
              --username iam \
              --password-stdin \
              cr.yandex
            
            docker pull cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.event.inputs.release_version }}_latest
            
            # Run new container
            docker run -d \
              --name app \
              -p 3000:3000 \
              cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.event.inputs.release_version }}_latest
            
            echo "üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!"

      - name: Find release issue
        id: find_issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ github.event.inputs.release_version }}
        run: |
          # Search for release issue
          issue_number=$(gh issue list --search "Release v$VERSION in:title" --json number --jq '.[0].number')
          
          if [ -z "$issue_number" ]; then
            # Fallback search in body
            issue_number=$(gh issue list --search "\"**Version:** $VERSION\" in:body" --json number --jq '.[0].number')
          fi
          
          if [ -z "$issue_number" ]; then
            echo "::error::Release issue for version $VERSION not found"
            exit 1
          fi
          
          echo "issue_number=$issue_number" >> $GITHUB_OUTPUT

      - name: Add deployment comment to issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DATE=$(date +%Y-%m-%d)
          VERSION=${{ github.event.inputs.release_version }}
          REGISTRY_ID=${{ secrets.YC_REGISTRY_ID }}
          IMAGE="cr.yandex/$REGISTRY_ID/app:${VERSION}_latest"
          
          # Create comment using GitHub CLI
          gh issue comment ${{ steps.find_issue.outputs.issue_number }} \
            --body "üöÄ **–í—ã–∫–∞—Ç–∫–∞ –≤ –ø—Ä–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**
  - –î–∞—Ç–∞: $DATE
  - –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: @${{ github.actor }}
  - –í–µ—Ä—Å–∏—è: $VERSION
  - –û–±—Ä–∞–∑: $IMAGE"