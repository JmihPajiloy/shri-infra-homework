name: Release Pipeline

on:
  workflow_dispatch:

jobs:
  lint_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm ci
      - name: Run linter
        run: npm run lint
      - name: Run tests
        run: npm test

  release:
    runs-on: ubuntu-latest
    needs: lint_and_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        run: |
          echo "RELEASE_VERSION=${{ github.run_number }}" >> $GITHUB_ENV
          echo "RELEASE_BRANCH=releases/${{ github.run_number }}" >> $GITHUB_ENV

      - name: Create release branch
        run: |
          git checkout -b ${{ env.RELEASE_BRANCH }}
          git push origin ${{ env.RELEASE_BRANCH }}

      - name: Login to Yandex Container Registry
        env:
          YC_IAM_TOKEN: ${{ secrets.YC_IAM_TOKEN }}
        run: |
          echo $YC_IAM_TOKEN | docker login \
            --username iam \
            --password-stdin \
            cr.yandex

      - name: Build and push Docker image
        env:
          YC_REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
        run: |
          docker build -t cr.yandex/$YC_REGISTRY_ID/app:${{ env.RELEASE_VERSION }} .
          docker tag cr.yandex/$YC_REGISTRY_ID/app:${{ env.RELEASE_VERSION }} cr.yandex/$YC_REGISTRY_ID/app:${RELEASE_VERSION}_latest
          docker push cr.yandex/$YC_REGISTRY_ID/app:${{ env.RELEASE_VERSION }}
          docker push cr.yandex/$YC_REGISTRY_ID/app:${RELEASE_VERSION}_latest

      - name: Create release tag
        run: |
          git tag v${{ env.RELEASE_VERSION }}
          git push origin v${{ env.RELEASE_VERSION }}

      - name: Get commit history
        id: changelog
        run: |
          # Find previous release tag
          LATEST_TAG=$(git describe --tags --match "v*" --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            # First release
            COMMITS=$(git log --reverse --pretty=format:"- %s [%h]")
          else
            # Commits since last release
            COMMITS=$(git log --reverse --pretty=format:"- %s [%h]" $LATEST_TAG..HEAD)
          fi
          
          # Escape newlines and preserve formatting
          COMMITS="${COMMITS//'%'/'%25'}"
          COMMITS="${COMMITS//$'\n'/'%0A'}"
          echo "commits=$COMMITS" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG.md
        run: |
          HEADER="# Version ${{ env.RELEASE_VERSION }} ($(date +%Y-%m-%d))"
          # Unescape newlines
          COMMITS="${{ steps.changelog.outputs.commits }}"
          COMMITS="${COMMITS//'%0A'/$'\n'}"
          
          echo -e "$HEADER\n$COMMITS\n\n$(cat CHANGELOG.md)" > CHANGELOG.md
          
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "Update changelog for version ${{ env.RELEASE_VERSION }}"
          git push origin ${{ env.RELEASE_BRANCH }}

      - name: Create release issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ env.RELEASE_VERSION }}
          REGISTRY_ID=${{ secrets.YC_REGISTRY_ID }}
          IMAGE="cr.yandex/$REGISTRY_ID/app:$VERSION"
          DATE=$(date +%Y-%m-%d)
          
          # Unescape commits
          COMMITS="${{ steps.changelog.outputs.commits }}"
          COMMITS="${COMMITS//'%0A'/$'\n'}"
          
          # Create issue with properly formatted Markdown
          BODY=$(cat <<END
  **Release Date:** $DATE
  **Author:** ${{ github.actor }}
  **Version:** $VERSION
  **Docker Image:** $IMAGE

  **Changes:**
  $COMMITS
  END
  )
  gh issue create \
  --title "Release v$VERSION" \
  --body "$BODY" \
  --label "release"