name: Release

on:
  workflow_dispatch:

jobs:
  lint_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm ci
      - name: Run linter
        run: npm run lint
      - name: Run tests
        run: npm test

  release:
    runs-on: ubuntu-latest
    needs: lint_and_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Полная история коммитов для работы с тегами

      - name: Setup environment
        run: |
          RELEASE_VERSION=${{ github.run_number }}
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "RELEASE_BRANCH=releases/$RELEASE_VERSION" >> $GITHUB_ENV

      - name: Create release branch
        run: |
          git checkout -b ${{ env.RELEASE_BRANCH }}
          git push origin ${{ env.RELEASE_BRANCH }}

      - name: Login to Yandex Container Registry
        env:
          YC_IAM_TOKEN: ${{ secrets.YC_IAM_TOKEN }}
        run: |
          echo $YC_IAM_TOKEN | docker login \
            --username iam \
            --password-stdin \
            cr.yandex

      - name: Build and push Docker image
        env:
          YC_REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
        run: |
          docker build -t cr.yandex/$YC_REGISTRY_ID/app:${{ env.RELEASE_VERSION }} .
          docker tag cr.yandex/$YC_REGISTRY_ID/app:${{ env.RELEASE_VERSION }} cr.yandex/$YC_REGISTRY_ID/app:${{ env.RELEASE_VERSION }}_latest
          docker push cr.yandex/$YC_REGISTRY_ID/app:${{ env.RELEASE_VERSION }}
          docker push cr.yandex/$YC_REGISTRY_ID/app:${{ env.RELEASE_VERSION }}_latest

      - name: Create release tag
        run: |
          git tag v${{ env.RELEASE_VERSION }}
          git push origin v${{ env.RELEASE_VERSION }}

#      - name: Generate changelog
#        id: changelog
#        run: |
#          # Поиск предыдущего релизного тега
#          LATEST_TAG=$(git describe --tags --match "v*" --abbrev=0 2>/dev/null || echo "")
#
#          if [ -z "$LATEST_TAG" ]; then
#            # Первый релиз
#            COMMITS=$(git log --pretty=format:"- %s [%h]")
#          else
#            # Все коммиты с предыдущего релиза
#            COMMITS=$(git log --pretty=format:"- %s [%h]" $LATEST_TAG..HEAD)
#          fi
#
#          # Форматирование вывода
#          COMMITS="${COMMITS//'%'/'%25'}"
#          COMMITS="${COMMITS//$'\n'/'%0A'}"
#          echo "commits=$COMMITS" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG.md
        run: |
          
          PREV=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null \
               || git rev-list --max-parents=0 HEAD)

          echo "## ${{ env.RELEASE_VERSION }} — $(date +'%Y-%m-%d')" > tmp
          git log --pretty=format:'- %s' $PREV..HEAD >> tmp
          cat CHANGELOG.md >> tmp
          mv tmp CHANGELOG.md

          git commit -m "Update changelog for version ${{ env.RELEASE_VERSION }}"
          git push origin ${{ env.RELEASE_BRANCH }}

#          HEADER="# Version ${{ env.RELEASE_VERSION }} ($(date +%Y-%m-%d))"
#          echo -e "$HEADER\n\n${{ steps.changelog.outputs.commits }}\n\n$(cat CHANGELOG.md)" > CHANGELOG.md
#          git config user.name "github-actions"
#          git config user.email "github-actions@users.noreply.github.com"
#          git add CHANGELOG.md
#          git commit -m "Update changelog for version ${{ env.RELEASE_VERSION }}"
#          git push origin ${{ env.RELEASE_BRANCH }}

      - name: Create release issue
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const version = '${{ env.RELEASE_VERSION }}';
            const registryId = '${{ secrets.YC_REGISTRY_ID }}';
            const image = `cr.yandex/${registryId}/app:${version}`;
            
            github.rest.issues.create({
              owner,
              repo,
              title: `Release v${version}`,
              body: `
                **Release Date:** ${new Date().toISOString().split('T')[0]}
                **Author:** ${{ github.actor }}
                **Version:** ${version}
                **Docker Image:** ${image}
            
                **Changes:**
                ${{ steps.changelog.outputs.commits }}
              `
            });