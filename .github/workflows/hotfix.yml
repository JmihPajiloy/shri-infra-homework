name: Hotfix Release Pipeline

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Версия релиза (например: 123)'
        required: true
        type: string

jobs:
  typecheck_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: releases/${{ github.event.inputs.release_version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run lint

      - name: Run tests
        run: npm test

  hotfix_release:
    runs-on: ubuntu-latest
    needs: typecheck_and_test
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: releases/${{ github.event.inputs.release_version }}
          fetch-depth: 0

      - name: Setup environment
        run: |
          HOTFIX_VERSION=${HOTFIX_VERSION:-${{ github.run_number }}}
          echo "HOTFIX_VERSION=$HOTFIX_VERSION" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${{ github.event.inputs.release_version }}" >> $GITHUB_ENV
          echo "FULL_VERSION=${RELEASE_VERSION}_fix${HOTFIX_VERSION}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${RELEASE_VERSION}_fix${HOTFIX_VERSION}" >> $GITHUB_ENV

      - name: Login to Yandex Container Registry
        env:
          YC_IAM_TOKEN: ${{ secrets.YC_IAM_TOKEN }}
        run: |
          echo $YC_IAM_TOKEN | docker login \
            --username iam \
            --password-stdin \
            cr.yandex

      - name: Build and push Docker image
        env:
          YC_REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
        run: |
          # Сборка образов с двумя тегами
          docker build -t cr.yandex/$YC_REGISTRY_ID/app:${{ env.IMAGE_TAG }} .
          docker tag cr.yandex/$YC_REGISTRY_ID/app:${{ env.IMAGE_TAG }} cr.yandex/$YC_REGISTRY_ID/app:${{ env.RELEASE_VERSION }}_latest
          
          # Пуш обоих образов
          docker push cr.yandex/$YC_REGISTRY_ID/app:${{ env.IMAGE_TAG }}
          docker push cr.yandex/$YC_REGISTRY_ID/app:${{ env.RELEASE_VERSION }}_latest
          
          echo "✅ Образы успешно загружены в Container Registry"

      - name: Create hotfix tag
        run: |
          git tag v${{ env.RELEASE_VERSION }}_fix${{ env.HOTFIX_VERSION }}
          git push origin v${{ env.RELEASE_VERSION }}_fix${{ env.HOTFIX_VERSION }}

      - name: Get commit history
        id: changelog
        run: |
          # Поиск предыдущего тега релиза
          PREV_TAG=$(git describe --tags --match "v${RELEASE_VERSION}*" --abbrev=0 2>/dev/null | sort -V | tail -2 | head -1 || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # Если предыдущий тег не найден, используем оригинальный релизный тег
            PREV_TAG="v${{ env.RELEASE_VERSION }}"
          fi
          
          # Получение коммитов между тегами
          COMMITS=$(git log --pretty=format:"- %s [%h]" $PREV_TAG..HEAD)
          
          # Сохранение для последующих шагов
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Find release issue
        id: find_issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_VERSION: ${{ github.event.inputs.release_version }}
        run: |
          # Поиск issue по версии релиза
          issue_number=$(gh issue list --search "Release v$RELEASE_VERSION in:title" --json number --jq '.[0].number')
          
          if [ -z "$issue_number" ]; then
            # Fallback поиск по телу issue
            issue_number=$(gh issue list --search "\"**Version:** $RELEASE_VERSION\" in:body" --json number --jq '.[0].number')
          fi
          
          if [ -z "$issue_number" ]; then
            echo "::error::Release issue for version $RELEASE_VERSION not found"
            exit 1
          fi
          
          echo "issue_number=$issue_number" >> $GITHUB_OUTPUT

      - name: Add hotfix comment to issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          YC_REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
        run: |
          HOTFIX_VERSION=${{ env.HOTFIX_VERSION }}
          RELEASE_VERSION=${{ env.RELEASE_VERSION }}
          IMAGE="cr.yandex/$YC_REGISTRY_ID/app:${RELEASE_VERSION}_fix${HOTFIX_VERSION}"
          
          COMMENT_BODY=$(cat <<EOF
          **Дата:** $(date +'%Y-%m-%d')
          
          **Автор:** @${{ github.actor }}
          
          **Версия фикса:** ${HOTFIX_VERSION}
          
          **Docker image:** ${IMAGE}
          
          **Изменения:**
          ${{ steps.changelog.outputs.commits }}
          
          EOF
          )
          
          # Создание комментария через GitHub CLI
          gh issue comment ${{ steps.find_issue.outputs.issue_number }} \
            --body "${COMMENT_BODY}"